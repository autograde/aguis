syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

//  USERS AND  USERGROUPS   //

message User {
    uint64 ID = 1;
    bool isAdmin = 2;
    string name = 3;
    string studentID = 4;
    string email = 5;
    string avatarURL = 6;
    string login = 7;

    repeated RemoteIdentity remoteIdentities = 8;
    repeated Enrollment enrollments = 9;
}

message Users {
    repeated User users = 1;
}

message RemoteIdentity {
    uint64 ID = 1;
    string provider = 2 [(gogoproto.moretags) = "gorm:\"unique_index:uid_provider_remote_id\""]; 
    uint64 remoteID = 3 [(gogoproto.moretags) = "gorm:\"unique_index:uid_provider_remote_id\""]; 
    string accessToken = 4;
    uint64 userID = 5;
}

message Group {
    enum GroupStatus {
        PENDING = 0;
        REJECTED = 1;
        APPROVED = 2;
        DELETED = 3;
    }
    uint64 ID = 1;
    string name = 2 [(gogoproto.moretags) = "gorm:\"unique_index:idx_unique_group_name\""];
    uint64 courseID = 3 [(gogoproto.moretags) = "gorm:\"unique_index:idx_unique_group_name\""]; 
    uint64 teamID = 4;
    GroupStatus status = 5;


    repeated User users = 6;
    repeated Enrollment enrollments = 7;
}

message Groups {
    repeated Group groups = 1;
}

//   COURSES   //

message Course {
    uint64 ID = 1;
    uint64 courseCreatorID = 2;
    string name = 3;
    string code = 4;
    uint32 year = 5;
    string tag = 6;
    string provider = 7;
    uint64 directoryID = 8;
    Enrollment.UserStatus enrolled = 9;

    repeated Enrollment enrollments = 10;
    repeated Assignment assignments = 12;
    repeated Group groups = 13;
}

message Courses {
    repeated Course courses = 1;
}

message Enrollment {
    enum UserStatus {
        NONE = 0;
        PENDING = 1;
        REJECTED = 2;
        STUDENT = 3;
        TEACHER = 4;
    }
    
    uint64 ID = 1;
    uint64 courseID = 2 [(gogoproto.moretags) = "gorm:\"unique_index:idx_unique_group_name\""];
    uint64 userID = 3 [(gogoproto.moretags) = "gorm:\"unique_index:idx_unique_group_name\""]; 
    uint64 groupID = 4;
    User user = 5;
    Course course = 6;
    Group group = 7;
    UserStatus status = 8;
}

message Enrollments {
    repeated Enrollment enrollments = 1;
}

message Assignment {
    uint64 ID = 1;
    uint64 courseID = 2;
    string name = 3;
    string language = 4;
    google.protobuf.Timestamp deadline = 5; 
    bool autoApprove = 6;
    uint32 order = 7;
    bool isGroupLab = 8;
    Submission submission = 9;    
}

message Assignments {
    repeated Assignment assignments = 1;
}

message Submission {
    uint64 ID = 1;
    uint64 assignmentID = 2;
    uint64 userID = 3;
    uint64 groupID = 4;
    uint32 score = 5;
    string scoreObjects = 6;
    string buildInfo = 7;
    string commitHash = 8;
    bool approved = 9;
}

message Submissions {
    repeated Submission submissions = 1;
}

message Repository {
    enum Type {
        USER = 0;
        ASSIGNMENTS = 1;
        TESTS = 2;
        SOLUTIONS = 3;
        COURSEINFO = 4;
    }
    uint64 ID = 1;
    uint64 directoryID = 2;
    uint64 repositoryID = 3;
    uint64 userID = 4;
    uint64 groupID = 5;
    string HTMLURL = 6;
    Type repoType = 7;
}

message Repositories {
    repeated Repository repositories = 1;
}

message Directory {
    uint64 ID = 1;
    string path = 2;
    string avatar = 3;
}

message Directories {
    repeated Directory directories = 1;
}

////    REQUESTS AND RESPONSES      \\\\

message RecordRequest {
    uint64 ID = 1;
    repeated Enrollment.UserStatus statuses = 2;
    repeated Group.GroupStatus groupStatuses = 3;
}

// fields can be empty, do not use fields for user validation, use context
// can be used in submission, enrollment and group requests, also in requests with multiple IDs
message ActionRequest {
    uint64 ID = 1;
    uint64 userID = 2;
    uint64 groupID = 3;
    uint64 courseID = 4;
    Enrollment.UserStatus status = 5;
    Group.GroupStatus groupStatus = 6;
}

message DirectoryRequest {
    string provider = 1;
    uint64 courseID = 2;
}

message RepositoryRequest {
    uint64 ID = 1;
    Repository.Type type = 2;
    uint64 directoryID = 3;
    uint64 repositoryID = 4;
    uint64 userID = 5;
    uint64 courseID = 6;
}

message Providers {
    repeated string providers = 1;
}

message URLResponse {
    string URL = 1;
}

message Void {}

service AutograderService {

    // users //

    rpc GetUser(RecordRequest) returns (User) {}
    rpc GetUsers(Void) returns (Users) {}
    rpc UpdateUser(User) returns (User) {}

    // groups //

    rpc GetGroup(RecordRequest) returns (Group) {}
    rpc GetGroupByUserAndCourse(ActionRequest) returns (Group) {} 
    rpc GetGroups(RecordRequest) returns (Groups) {} 
    rpc CreateGroup(Group) returns (Group) {} 
    rpc UpdateGroup(Group) returns (Void) {}
    rpc DeleteGroup(Group) returns (Void) {}

    // courses //

    rpc GetCourse(RecordRequest) returns (Course) {} 
    rpc GetCourses(Void) returns (Courses) {} 
    rpc GetCoursesWithEnrollment(RecordRequest) returns (Courses) {}
    rpc GetCourseInformationURL (RecordRequest) returns (URLResponse) {} 
    rpc CreateCourse(Course) returns (Course) {}
    rpc UpdateCourse(Course) returns (Void) {}
    rpc RefreshCourse (RecordRequest) returns (Assignments) {}

    // enrollments //

    rpc GetEnrollmentsByCourse(RecordRequest) returns (Enrollments) {}
    rpc CreateEnrollment(ActionRequest) returns (Void) {} 
    rpc UpdateEnrollment(ActionRequest) returns (Void) {} 

    // submissions //

    rpc GetSubmissions(ActionRequest) returns (Submissions) {}
    rpc GetSubmission(RecordRequest) returns (Submission) {}
    rpc GetGroupSubmissions(ActionRequest) returns (Submissions) {}
    rpc UpdateSubmission(RecordRequest) returns (Void) {}
   
    // misc //
    
    rpc GetAssignments(RecordRequest) returns (Assignments) {} 
    rpc GetRepositoryURL(RepositoryRequest) returns (URLResponse){}
    rpc GetProviders(Void) returns (Providers) {}
    rpc GetDirectories (DirectoryRequest) returns (Directories) {}

    // The sole purpose of this RPC is to provide a reference to Repository type to TypeScript client
    // Might later be used as a more general type for retrieval of repo information 
    rpc GetRepository (RepositoryRequest) returns (Repository) {}
}